// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package mock

import (
	"sync"
)

var (
	lockLoaderMockChanges sync.RWMutex
	lockLoaderMockLoad    sync.RWMutex
)

// LoaderMock is a mock implementation of Loader.
//
//     func TestSomethingThatUsesLoader(t *testing.T) {
//
//         // make and configure a mocked Loader
//         mockedLoader := &LoaderMock{
//             ChangesFunc: func() <-chan struct{} {
// 	               panic("TODO: mock out the Changes method")
//             },
//             LoadFunc: func(dest interface{}) error {
// 	               panic("TODO: mock out the Load method")
//             },
//         }
//
//         // TODO: use mockedLoader in code that requires Loader
//         //       and then make assertions.
//
//     }
type LoaderMock struct {
	// ChangesFunc mocks the Changes method.
	ChangesFunc func() <-chan struct{}

	// LoadFunc mocks the Load method.
	LoadFunc func(dest interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// Changes holds details about calls to the Changes method.
		Changes []struct {
		}
		// Load holds details about calls to the Load method.
		Load []struct {
			// Dest is the dest argument value.
			Dest interface{}
		}
	}
}

// Changes calls ChangesFunc.
func (mock *LoaderMock) Changes() <-chan struct{} {
	if mock.ChangesFunc == nil {
		panic("moq: LoaderMock.ChangesFunc is nil but Loader.Changes was just called")
	}
	callInfo := struct {
	}{}
	lockLoaderMockChanges.Lock()
	mock.calls.Changes = append(mock.calls.Changes, callInfo)
	lockLoaderMockChanges.Unlock()
	return mock.ChangesFunc()
}

// ChangesCalls gets all the calls that were made to Changes.
// Check the length with:
//     len(mockedLoader.ChangesCalls())
func (mock *LoaderMock) ChangesCalls() []struct {
} {
	var calls []struct {
	}
	lockLoaderMockChanges.RLock()
	calls = mock.calls.Changes
	lockLoaderMockChanges.RUnlock()
	return calls
}

// Load calls LoadFunc.
func (mock *LoaderMock) Load(dest interface{}) error {
	if mock.LoadFunc == nil {
		panic("moq: LoaderMock.LoadFunc is nil but Loader.Load was just called")
	}
	callInfo := struct {
		Dest interface{}
	}{
		Dest: dest,
	}
	lockLoaderMockLoad.Lock()
	mock.calls.Load = append(mock.calls.Load, callInfo)
	lockLoaderMockLoad.Unlock()
	return mock.LoadFunc(dest)
}

// LoadCalls gets all the calls that were made to Load.
// Check the length with:
//     len(mockedLoader.LoadCalls())
func (mock *LoaderMock) LoadCalls() []struct {
	Dest interface{}
} {
	var calls []struct {
		Dest interface{}
	}
	lockLoaderMockLoad.RLock()
	calls = mock.calls.Load
	lockLoaderMockLoad.RUnlock()
	return calls
}
